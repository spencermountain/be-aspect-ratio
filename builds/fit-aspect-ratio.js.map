{"version":3,"file":"fit-aspect-ratio.js","sources":["../src/aspects.js","../src/find-best-ratio.js","../src/parse-ratio.js","../src/fit.js","../src/index.js"],"sourcesContent":["//lists are stored in landscape orientation\nconst list = [\n  {\n    names: ['square', '1:1', 'instagram'],\n    description: 'Square',\n    decimal: 1,\n    orientation: 'landscape'\n  },\n  {\n    names: ['4:3', 'fullscreen', 'four three', '1.33:1', 'ipad', 'pythagorean'],\n    description: 'Traditional TVs',\n    decimal: 1.333333,\n    orientation: 'landscape'\n  },\n  {\n    names: ['a4', '√2:1', 'paper', 'lichtenberg', '1:1.41'],\n    description: 'A4 paper',\n    decimal: 1.41\n  },\n  {\n    names: ['imax', '1.43:1'],\n    description: 'IMAX film',\n    decimal: 1.43,\n    orientation: 'landscape'\n  },\n  {\n    names: ['3:2', '35mm', 'photo', '1.5:1', '1.5'],\n    description: '35mm photos',\n    decimal: 1.5,\n    orientation: 'landscape'\n  },\n  {\n    names: ['business card', 'bank card', '1.58:1'],\n    description: 'Bank Cards',\n    decimal: 1.58577,\n    orientation: 'landscape'\n  },\n  {\n    names: ['golden', 'kepler', '1.618', '1.6:1'],\n    description: 'Golden ratio',\n    decimal: 1.61803,\n    orientation: 'landscape'\n  },\n  {\n    names: [\n      '16:9',\n      'hd',\n      'hdtv',\n      'fhd',\n      'tv',\n      'computer',\n      'iphone',\n      '4k',\n      '8k',\n      '1.78:1'\n    ],\n    description: 'HD video',\n    decimal: 1.77777,\n    orientation: 'landscape'\n  },\n  {\n    names: ['widescreen', '1.85:1'],\n    description: 'Movie-theatres',\n    decimal: 1.85,\n    orientation: 'landscape'\n  },\n  {\n    names: ['2:1', 'univisium', 'mobile', '18:9'],\n    description: '2:1',\n    decimal: 2,\n    orientation: 'landscape'\n  },\n  {\n    names: ['cinemascope', 'widescreen', 'wide', '2.35:1', '2.39:1'],\n    description: 'Widescreen',\n    decimal: 2.35,\n    orientation: 'landscape'\n  },\n  {\n    names: ['silver', '1 + √2', '2.41:1'],\n    description: 'Silver ratio',\n    decimal: 2.41,\n    orientation: 'landscape'\n  }\n]\n//create portrait mode\nlet portraits = list.map(o => {\n  o = Object.assign({}, o)\n  o.decimal = 1 / o.decimal\n  o.orientation = 'portrait'\n  return o\n})\n// const list = portrait.concat(landscape)\n\n//flip it into a nice lookup hash\nlet lookup = {}\nlist.forEach(o => {\n  o.names.forEach(name => {\n    lookup[name] = o\n  })\n})\nmodule.exports = {\n  lookup: lookup,\n  portraits: portraits,\n  list: list\n}\n","const aspects = require('./aspects')\n\n//find the closest landscape ratio\nconst findLandscape = function(decimal, list) {\n  for (let i = 0; i < list.length; i += 1) {\n    if (decimal <= list[i].decimal) {\n      //was the previous one even closer?\n      if (list[i - 1]) {\n        let diffThis = Math.abs(decimal - list[i].decimal)\n        let diffLast = Math.abs(decimal - list[i - 1].decimal)\n        if (diffLast < diffThis) {\n          return list[i - 1]\n        }\n      }\n      return list[i]\n    }\n  }\n  return list[list.length - 1]\n}\n\n//find the closest portrait ratio\nconst findPortrait = function(decimal, list) {\n  for (let i = 0; i < list.length; i += 1) {\n    if (decimal > list[i].decimal) {\n      //was the previous one even closer?\n      if (list[i - 1]) {\n        let diffThis = Math.abs(decimal - list[i].decimal)\n        let diffLast = Math.abs(decimal - list[i - 1].decimal)\n        if (diffLast < diffThis) {\n          return list[i - 1]\n        }\n      }\n      return list[i]\n    }\n  }\n  return list[list.length - 1]\n}\n\n//find the closest aspect ratio from width/height\nconst findBestRatio = function(width, height) {\n  let decimal = width / height\n  //round it to 2 decimals\n  decimal = parseInt(decimal * 100, 10) / 100\n  //do we want a portrait or landscape aspect ratio?\n  if (decimal < 1) {\n    return findPortrait(decimal, aspects.portraits)\n  }\n  return findLandscape(decimal, aspects.list)\n}\n\nmodule.exports = findBestRatio\n","const aspects = require('./aspects')\nconst isRatio = /^[0-9\\.]+:[0-9\\.]+$/\n\n//determine aspect ratio from name\nconst parseRatio = function(name) {\n  name = name.toLowerCase()\n  name = name.trim()\n  name = name.replace(' ratio', '')\n  name = name.replace('-', ' ')\n  //if we know it..\n  if (aspects.lookup.hasOwnProperty(name) === true) {\n    return aspects.lookup[name]\n  }\n  //if it's numerical\n  if (isRatio.test(name) === true) {\n    let arr = name.split(':')\n    let width = parseFloat(arr[0])\n    let height = parseFloat(arr[1])\n    let aspect = {\n      description: 'custom',\n      decimal: width / height\n    }\n    return aspect\n  }\n  return null\n}\nmodule.exports = parseRatio\n","const fitHeight = function(obj, aspect) {\n  let decimal = 1 / aspect.decimal\n  let orientation = obj.orientation || 'landscape'\n  //reverse it (again), if in portrait\n  if (orientation === 'portrait') {\n    decimal = 1 / decimal\n  }\n  let height = obj.width * decimal\n  height = Math.round(height)\n  return {\n    closest: aspect,\n    width: obj.width,\n    height: height,\n    orientation: orientation,\n    original: obj\n  }\n}\n\nconst fitWidth = function(obj, aspect) {\n  let decimal = aspect.decimal\n  let orientation = obj.orientation || 'landscape'\n  //reverse it, if in portrait\n  if (orientation === 'portrait') {\n    decimal = 1 / decimal\n  }\n  let width = obj.height * decimal\n  width = Math.round(width)\n  return {\n    closest: aspect,\n    width: width,\n    height: obj.height,\n    orientation: orientation,\n    original: obj\n  }\n}\n\n//shorten the side that's too long\nconst shrink = function(obj, aspect) {\n  let moveWidth = fitWidth(obj, aspect)\n  //did this make our width longer?\n  if (moveWidth.width > obj.width) {\n    return fitHeight(obj, aspect)\n  }\n  return moveWidth\n}\n\nmodule.exports = {\n  both: shrink,\n  width: fitWidth,\n  height: fitHeight\n}\n","// calculates widths/heights according to common aspect ratios.\nconst findBestRatio = require('./find-best-ratio')\nconst parseRatio = require('./parse-ratio')\nconst fit = require('./fit')\n\n//\nconst fitAspect = function(obj = {}) {\n  //for these numbers, calculate best ratio\n  if (!obj.aspect && !obj.ratio) {\n    let aspect = findBestRatio(obj.width, obj.height)\n    let inverse = 1 / aspect.decimal\n    let height = obj.width * inverse\n    //calculate change %\n    let change = (height - obj.height) / obj.height\n    change = parseInt(change * 1000, 10) / 10\n    height = Math.round(height)\n    return {\n      closest: aspect,\n      percent_change: change,\n      width: obj.width,\n      height: height\n    }\n  }\n  //lookup aspect ratio\n  let aspect = parseRatio(obj.aspect || obj.ratio || '')\n  if (aspect === null) {\n    console.error(\n      'find-aspect-ratio error: Could not find a given aspect ratio.'\n    )\n    return obj\n  }\n  //shrink both to fit\n  if (typeof obj.width === 'number' && typeof obj.height === 'number') {\n    return fit.both(obj, aspect)\n  }\n\n  //determine missing height\n  if (typeof obj.width === 'number') {\n    return fit.height(obj, aspect)\n  }\n  //determine missing width\n  if (typeof obj.height === 'number') {\n    return fit.width(obj, aspect)\n  }\n  //doh\n  console.error(\n    'find-aspect-ratio error: Please supply a height, width, or ratio value.'\n  )\n  return obj\n}\n\nmodule.exports = fitAspect\n"],"names":["list","names","description","decimal","orientation","portraits","map","o","Object","assign","lookup","forEach","name","findLandscape","i","length","diffThis","Math","abs","diffLast","findPortrait","findBestRatio","width","height","parseInt","aspects","isRatio","parseRatio","toLowerCase","trim","replace","hasOwnProperty","test","arr","split","parseFloat","aspect","fitHeight","obj","round","closest","original","fitWidth","shrink","moveWidth","both","fitAspect","ratio","inverse","change","percent_change","console","error","fit"],"mappings":";;;;;;EAAA;EACA,MAAMA,IAAI,GAAG,CACX;EACEC,EAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,KAAX,EAAkB,WAAlB,CADT;EAEEC,EAAAA,WAAW,EAAE,QAFf;EAGEC,EAAAA,OAAO,EAAE,CAHX;EAIEC,EAAAA,WAAW,EAAE;EAJf,CADW,EAOX;EACEH,EAAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,YAAR,EAAsB,YAAtB,EAAoC,QAApC,EAA8C,MAA9C,EAAsD,aAAtD,CADT;EAEEC,EAAAA,WAAW,EAAE,iBAFf;EAGEC,EAAAA,OAAO,EAAE,QAHX;EAIEC,EAAAA,WAAW,EAAE;EAJf,CAPW,EAaX;EACEH,EAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,MAAP,EAAe,OAAf,EAAwB,aAAxB,EAAuC,QAAvC,CADT;EAEEC,EAAAA,WAAW,EAAE,UAFf;EAGEC,EAAAA,OAAO,EAAE;EAHX,CAbW,EAkBX;EACEF,EAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,QAAT,CADT;EAEEC,EAAAA,WAAW,EAAE,WAFf;EAGEC,EAAAA,OAAO,EAAE,IAHX;EAIEC,EAAAA,WAAW,EAAE;EAJf,CAlBW,EAwBX;EACEH,EAAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,EAAyB,OAAzB,EAAkC,KAAlC,CADT;EAEEC,EAAAA,WAAW,EAAE,aAFf;EAGEC,EAAAA,OAAO,EAAE,GAHX;EAIEC,EAAAA,WAAW,EAAE;EAJf,CAxBW,EA8BX;EACEH,EAAAA,KAAK,EAAE,CAAC,eAAD,EAAkB,WAAlB,EAA+B,QAA/B,CADT;EAEEC,EAAAA,WAAW,EAAE,YAFf;EAGEC,EAAAA,OAAO,EAAE,OAHX;EAIEC,EAAAA,WAAW,EAAE;EAJf,CA9BW,EAoCX;EACEH,EAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,EAA8B,OAA9B,CADT;EAEEC,EAAAA,WAAW,EAAE,cAFf;EAGEC,EAAAA,OAAO,EAAE,OAHX;EAIEC,EAAAA,WAAW,EAAE;EAJf,CApCW,EA0CX;EACEH,EAAAA,KAAK,EAAE,CACL,MADK,EAEL,IAFK,EAGL,MAHK,EAIL,KAJK,EAKL,IALK,EAML,UANK,EAOL,QAPK,EAQL,IARK,EASL,IATK,EAUL,QAVK,CADT;EAaEC,EAAAA,WAAW,EAAE,UAbf;EAcEC,EAAAA,OAAO,EAAE,OAdX;EAeEC,EAAAA,WAAW,EAAE;EAff,CA1CW,EA2DX;EACEH,EAAAA,KAAK,EAAE,CAAC,YAAD,EAAe,QAAf,CADT;EAEEC,EAAAA,WAAW,EAAE,gBAFf;EAGEC,EAAAA,OAAO,EAAE,IAHX;EAIEC,EAAAA,WAAW,EAAE;EAJf,CA3DW,EAiEX;EACEH,EAAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,WAAR,EAAqB,QAArB,EAA+B,MAA/B,CADT;EAEEC,EAAAA,WAAW,EAAE,KAFf;EAGEC,EAAAA,OAAO,EAAE,CAHX;EAIEC,EAAAA,WAAW,EAAE;EAJf,CAjEW,EAuEX;EACEH,EAAAA,KAAK,EAAE,CAAC,aAAD,EAAgB,YAAhB,EAA8B,MAA9B,EAAsC,QAAtC,EAAgD,QAAhD,CADT;EAEEC,EAAAA,WAAW,EAAE,YAFf;EAGEC,EAAAA,OAAO,EAAE,IAHX;EAIEC,EAAAA,WAAW,EAAE;EAJf,CAvEW,EA6EX;EACEH,EAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,CADT;EAEEC,EAAAA,WAAW,EAAE,cAFf;EAGEC,EAAAA,OAAO,EAAE,IAHX;EAIEC,EAAAA,WAAW,EAAE;EAJf,CA7EW,CAAb;;EAqFA,IAAIC,SAAS,GAAGL,IAAI,CAACM,GAAL,CAASC,CAAC,IAAI;EAC5BA,EAAAA,CAAC,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,CAAlB,CAAJ;EACAA,EAAAA,CAAC,CAACJ,OAAF,GAAY,IAAII,CAAC,CAACJ,OAAlB;EACAI,EAAAA,CAAC,CAACH,WAAF,GAAgB,UAAhB;EACA,SAAOG,CAAP;EACD,CALe,CAAhB;;;EASA,IAAIG,MAAM,GAAG,EAAb;EACAV,IAAI,CAACW,OAAL,CAAaJ,CAAC,IAAI;EAChBA,EAAAA,CAAC,CAACN,KAAF,CAAQU,OAAR,CAAgBC,IAAI,IAAI;EACtBF,IAAAA,MAAM,CAACE,IAAD,CAAN,GAAeL,CAAf;EACD,GAFD;EAGD,CAJD;EAKA,WAAc,GAAG;EACfG,EAAAA,MAAM,EAAEA,MADO;EAEfL,EAAAA,SAAS,EAAEA,SAFI;EAGfL,EAAAA,IAAI,EAAEA;EAHS,CAAjB;;EClGA,MAAMa,aAAa,GAAG,UAASV,OAAT,EAAkBH,IAAlB,EAAwB;EAC5C,OAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,IAAI,CAACe,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;EACvC,QAAIX,OAAO,IAAIH,IAAI,CAACc,CAAD,CAAJ,CAAQX,OAAvB,EAAgC;;EAE9B,UAAIH,IAAI,CAACc,CAAC,GAAG,CAAL,CAAR,EAAiB;EACf,YAAIE,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASf,OAAO,GAAGH,IAAI,CAACc,CAAD,CAAJ,CAAQX,OAA3B,CAAf;EACA,YAAIgB,QAAQ,GAAGF,IAAI,CAACC,GAAL,CAASf,OAAO,GAAGH,IAAI,CAACc,CAAC,GAAG,CAAL,CAAJ,CAAYX,OAA/B,CAAf;;EACA,YAAIgB,QAAQ,GAAGH,QAAf,EAAyB;EACvB,iBAAOhB,IAAI,CAACc,CAAC,GAAG,CAAL,CAAX;EACD;EACF;;EACD,aAAOd,IAAI,CAACc,CAAD,CAAX;EACD;EACF;;EACD,SAAOd,IAAI,CAACA,IAAI,CAACe,MAAL,GAAc,CAAf,CAAX;EACD,CAfD;;;EAkBA,MAAMK,YAAY,GAAG,UAASjB,OAAT,EAAkBH,IAAlB,EAAwB;EAC3C,OAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,IAAI,CAACe,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;EACvC,QAAIX,OAAO,GAAGH,IAAI,CAACc,CAAD,CAAJ,CAAQX,OAAtB,EAA+B;;EAE7B,UAAIH,IAAI,CAACc,CAAC,GAAG,CAAL,CAAR,EAAiB;EACf,YAAIE,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASf,OAAO,GAAGH,IAAI,CAACc,CAAD,CAAJ,CAAQX,OAA3B,CAAf;EACA,YAAIgB,QAAQ,GAAGF,IAAI,CAACC,GAAL,CAASf,OAAO,GAAGH,IAAI,CAACc,CAAC,GAAG,CAAL,CAAJ,CAAYX,OAA/B,CAAf;;EACA,YAAIgB,QAAQ,GAAGH,QAAf,EAAyB;EACvB,iBAAOhB,IAAI,CAACc,CAAC,GAAG,CAAL,CAAX;EACD;EACF;;EACD,aAAOd,IAAI,CAACc,CAAD,CAAX;EACD;EACF;;EACD,SAAOd,IAAI,CAACA,IAAI,CAACe,MAAL,GAAc,CAAf,CAAX;EACD,CAfD;;;EAkBA,MAAMM,aAAa,GAAG,UAASC,KAAT,EAAgBC,MAAhB,EAAwB;EAC5C,MAAIpB,OAAO,GAAGmB,KAAK,GAAGC,MAAtB,CAD4C;;EAG5CpB,EAAAA,OAAO,GAAGqB,QAAQ,CAACrB,OAAO,GAAG,GAAX,EAAgB,EAAhB,CAAR,GAA8B,GAAxC,CAH4C;;EAK5C,MAAIA,OAAO,GAAG,CAAd,EAAiB;EACf,WAAOiB,YAAY,CAACjB,OAAD,EAAUsB,OAAO,CAACpB,SAAlB,CAAnB;EACD;;EACD,SAAOQ,aAAa,CAACV,OAAD,EAAUsB,OAAO,CAACzB,IAAlB,CAApB;EACD,CATD;;EAWA,mBAAc,GAAGqB,aAAjB;;ECjDA,MAAMK,OAAO,GAAG,qBAAhB;;EAGA,MAAMC,UAAU,GAAG,UAASf,IAAT,EAAe;EAChCA,EAAAA,IAAI,GAAGA,IAAI,CAACgB,WAAL,EAAP;EACAhB,EAAAA,IAAI,GAAGA,IAAI,CAACiB,IAAL,EAAP;EACAjB,EAAAA,IAAI,GAAGA,IAAI,CAACkB,OAAL,CAAa,QAAb,EAAuB,EAAvB,CAAP;EACAlB,EAAAA,IAAI,GAAGA,IAAI,CAACkB,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAP,CAJgC;;EAMhC,MAAIL,OAAO,CAACf,MAAR,CAAeqB,cAAf,CAA8BnB,IAA9B,MAAwC,IAA5C,EAAkD;EAChD,WAAOa,OAAO,CAACf,MAAR,CAAeE,IAAf,CAAP;EACD,GAR+B;;;EAUhC,MAAIc,OAAO,CAACM,IAAR,CAAapB,IAAb,MAAuB,IAA3B,EAAiC;EAC/B,QAAIqB,GAAG,GAAGrB,IAAI,CAACsB,KAAL,CAAW,GAAX,CAAV;EACA,QAAIZ,KAAK,GAAGa,UAAU,CAACF,GAAG,CAAC,CAAD,CAAJ,CAAtB;EACA,QAAIV,MAAM,GAAGY,UAAU,CAACF,GAAG,CAAC,CAAD,CAAJ,CAAvB;EACA,QAAIG,MAAM,GAAG;EACXlC,MAAAA,WAAW,EAAE,QADF;EAEXC,MAAAA,OAAO,EAAEmB,KAAK,GAAGC;EAFN,KAAb;EAIA,WAAOa,MAAP;EACD;;EACD,SAAO,IAAP;EACD,CArBD;;EAsBA,gBAAc,GAAGT,UAAjB;;EC1BA,MAAMU,SAAS,GAAG,UAASC,GAAT,EAAcF,MAAd,EAAsB;EACtC,MAAIjC,OAAO,GAAG,IAAIiC,MAAM,CAACjC,OAAzB;EACA,MAAIC,WAAW,GAAGkC,GAAG,CAAClC,WAAJ,IAAmB,WAArC,CAFsC;;EAItC,MAAIA,WAAW,KAAK,UAApB,EAAgC;EAC9BD,IAAAA,OAAO,GAAG,IAAIA,OAAd;EACD;;EACD,MAAIoB,MAAM,GAAGe,GAAG,CAAChB,KAAJ,GAAYnB,OAAzB;EACAoB,EAAAA,MAAM,GAAGN,IAAI,CAACsB,KAAL,CAAWhB,MAAX,CAAT;EACA,SAAO;EACLiB,IAAAA,OAAO,EAAEJ,MADJ;EAELd,IAAAA,KAAK,EAAEgB,GAAG,CAAChB,KAFN;EAGLC,IAAAA,MAAM,EAAEA,MAHH;EAILnB,IAAAA,WAAW,EAAEA,WAJR;EAKLqC,IAAAA,QAAQ,EAAEH;EALL,GAAP;EAOD,CAhBD;;EAkBA,MAAMI,QAAQ,GAAG,UAASJ,GAAT,EAAcF,MAAd,EAAsB;EACrC,MAAIjC,OAAO,GAAGiC,MAAM,CAACjC,OAArB;EACA,MAAIC,WAAW,GAAGkC,GAAG,CAAClC,WAAJ,IAAmB,WAArC,CAFqC;;EAIrC,MAAIA,WAAW,KAAK,UAApB,EAAgC;EAC9BD,IAAAA,OAAO,GAAG,IAAIA,OAAd;EACD;;EACD,MAAImB,KAAK,GAAGgB,GAAG,CAACf,MAAJ,GAAapB,OAAzB;EACAmB,EAAAA,KAAK,GAAGL,IAAI,CAACsB,KAAL,CAAWjB,KAAX,CAAR;EACA,SAAO;EACLkB,IAAAA,OAAO,EAAEJ,MADJ;EAELd,IAAAA,KAAK,EAAEA,KAFF;EAGLC,IAAAA,MAAM,EAAEe,GAAG,CAACf,MAHP;EAILnB,IAAAA,WAAW,EAAEA,WAJR;EAKLqC,IAAAA,QAAQ,EAAEH;EALL,GAAP;EAOD,CAhBD;;;EAmBA,MAAMK,MAAM,GAAG,UAASL,GAAT,EAAcF,MAAd,EAAsB;EACnC,MAAIQ,SAAS,GAAGF,QAAQ,CAACJ,GAAD,EAAMF,MAAN,CAAxB,CADmC;;EAGnC,MAAIQ,SAAS,CAACtB,KAAV,GAAkBgB,GAAG,CAAChB,KAA1B,EAAiC;EAC/B,WAAOe,SAAS,CAACC,GAAD,EAAMF,MAAN,CAAhB;EACD;;EACD,SAAOQ,SAAP;EACD,CAPD;;EASA,OAAc,GAAG;EACfC,EAAAA,IAAI,EAAEF,MADS;EAEfrB,EAAAA,KAAK,EAAEoB,QAFQ;EAGfnB,EAAAA,MAAM,EAAEc;EAHO,CAAjB;;;;ECxCA,MAAMS,SAAS,GAAG,UAASR,GAAG,GAAG,EAAf,EAAmB;;EAEnC,MAAI,CAACA,GAAG,CAACF,MAAL,IAAe,CAACE,GAAG,CAACS,KAAxB,EAA+B;EAC7B,QAAIX,MAAM,GAAGf,eAAa,CAACiB,GAAG,CAAChB,KAAL,EAAYgB,GAAG,CAACf,MAAhB,CAA1B;EACA,QAAIyB,OAAO,GAAG,IAAIZ,MAAM,CAACjC,OAAzB;EACA,QAAIoB,MAAM,GAAGe,GAAG,CAAChB,KAAJ,GAAY0B,OAAzB,CAH6B;;EAK7B,QAAIC,MAAM,GAAG,CAAC1B,MAAM,GAAGe,GAAG,CAACf,MAAd,IAAwBe,GAAG,CAACf,MAAzC;EACA0B,IAAAA,MAAM,GAAGzB,QAAQ,CAACyB,MAAM,GAAG,IAAV,EAAgB,EAAhB,CAAR,GAA8B,EAAvC;EACA1B,IAAAA,MAAM,GAAGN,IAAI,CAACsB,KAAL,CAAWhB,MAAX,CAAT;EACA,WAAO;EACLiB,MAAAA,OAAO,EAAEJ,MADJ;EAELc,MAAAA,cAAc,EAAED,MAFX;EAGL3B,MAAAA,KAAK,EAAEgB,GAAG,CAAChB,KAHN;EAILC,MAAAA,MAAM,EAAEA;EAJH,KAAP;EAMD,GAhBkC;;;EAkBnC,MAAIa,MAAM,GAAGT,YAAU,CAACW,GAAG,CAACF,MAAJ,IAAcE,GAAG,CAACS,KAAlB,IAA2B,EAA5B,CAAvB;;EACA,MAAIX,MAAM,KAAK,IAAf,EAAqB;EACnBe,IAAAA,OAAO,CAACC,KAAR,CACE,+DADF;EAGA,WAAOd,GAAP;EACD,GAxBkC;;;EA0BnC,MAAI,OAAOA,GAAG,CAAChB,KAAX,KAAqB,QAArB,IAAiC,OAAOgB,GAAG,CAACf,MAAX,KAAsB,QAA3D,EAAqE;EACnE,WAAO8B,GAAG,CAACR,IAAJ,CAASP,GAAT,EAAcF,MAAd,CAAP;EACD,GA5BkC;;;EA+BnC,MAAI,OAAOE,GAAG,CAAChB,KAAX,KAAqB,QAAzB,EAAmC;EACjC,WAAO+B,GAAG,CAAC9B,MAAJ,CAAWe,GAAX,EAAgBF,MAAhB,CAAP;EACD,GAjCkC;;;EAmCnC,MAAI,OAAOE,GAAG,CAACf,MAAX,KAAsB,QAA1B,EAAoC;EAClC,WAAO8B,GAAG,CAAC/B,KAAJ,CAAUgB,GAAV,EAAeF,MAAf,CAAP;EACD,GArCkC;;;EAuCnCe,EAAAA,OAAO,CAACC,KAAR,CACE,yEADF;EAGA,SAAOd,GAAP;EACD,CA3CD;;EA6CA,OAAc,GAAGQ,SAAjB;;;;;;;;"}